{"ast":null,"code":"// import React, { useEffect, useState } from 'react';\n// import { HuePicker } from 'react-color'\n// import {useSelector, useDispatch } from 'react-redux';\n// import './canvas.css'\n// import { Stage, Layer, Line, Text } from 'react-konva';\n// import { socketRef } from '../socket/socket';\n// function Canvas() {\n//   const [tool, setTool] = useState('pen');\n//   const [lines, setLines] = useState([]);\n//   const [colorPen, setColorPen] = useState(\"#000000\");\n//   const isDrawing = React.useRef(false);\n//   const [shardDraw, setShardDraw] = useState();\n//   var lastLine;\n//   const name=useSelector((state)=>state.member.name)\n//   // useEffect(() => {\n//   //       console.log(\"effect\")\n//   //       socketRef.emit(\"sendDraw\")窶十n//   //     },[]);\n//   // socketRef.on(\"drawingListener\",(lines)=>{\n//   //   console.log(\"wowwwwwwwwwwwwwwwwww\");\n//   //   setLines(lines)\n//   //   console.log(lines,\"lineson\");\n//   //   })\n// socketRef.on(\"drawingListener\",(lines1)=>{\n// debugger\n// console.log(\"wowwwwwwwwwwwwwwwwww\",lines1);\n// //dispatch(actions.setLines(lines))\n// setLines(lines1)\n// console.log(lines1,\"lineson\");\n// })窶十n//   const handleMouseDown = (e) => {\n//     isDrawing.current = true;\n//     const pos = e.target.getStage().getPointerPosition();\n//     console.log(\"pos\",pos);\n//     setLines([...lines, { tool, points: [pos.x, pos.y] }]);\n//   };\n//   const handleMouseMove = (e) => {\n//       console.log\n//       (\"dawn\")\n//     // no drawing - skipping\n//     if (!isDrawing.current) {\n//       return;\n//     }\n//     const stage = e.target.getStage();\n//     console.log(stage, 's')\n//     const point = stage.getPointerPosition();\n//     console.log(point, 'p')\n//     lastLine = lines[lines.length - 1];\n//     lastLine.color = colorPen;\n//     lastLine.name=name;\n//     console.log(lastLine, 'll')\n//     // add point\n//     lastLine.points = lastLine.points.concat([point.x, point.y]);\n//     setShardDraw(lastLine.points)\n//     console.log(\"sendDraw\");\n//     socketRef.emit(\"sendDraw\", lines)\n//     // event\n//     console.log(lastLine.points, 'emit')\n//     // replace last\n//     lines.splice(lines.length - 1, 1, lastLine);\n//     setLines(lines.concat());\n//     console.log(lines, 'lines');\n//   };\n//   const handleMouseUp = () => {\n//     isDrawing.current = false;\n//   };\n//  const handleChangeComplete = (color) => {\n//    console.log(\"ccc\", color.hex)\n//     setColorPen(color.hex);\n//   };\n//   return (\n//     <div>\n//        <select \n//        className=\"select_canvas\"\n//         value={tool}\n//         onChange={(e) => {\n//           setTool(e.target.value);\n//         }}\n//       >\n//         <option value=\"pen\">Pen</option>\n//         <option value=\"eraser\">Eraser</option>\n//       </select>\n//       <Stage \n//       className=\"stage_canvas\"\n//         width={160}\n//         height={200}\n//         onMouseDown={handleMouseDown}\n//         onMousemove={handleMouseMove}\n//         onMouseup={handleMouseUp}\n//       >\n//         <Layer>\n//           <Text text=\"Just start drawing\" x={5} y={30} />\n//           {lines.map((line, i) => (\n//             <Line\n//               key={i}\n//               points={line.points}\n//               stroke={line.color}\n//               strokeWidth={5}\n//               tension={0.5}\n//               lineCap=\"round\"\n//               globalCompositeOperation={\n//                 line.tool === 'eraser' ? 'destination-out' : 'source-over'\n//               }\n//             />\n//           ))}\n//         </Layer>\n//       </Stage>\n//       <HuePicker className=\"picker_canvas\" \n//        color={ colorPen }\n//        onChangeComplete={ handleChangeComplete }/>\n//     </div>\n//   );\n// };\n// export default Canvas","map":{"version":3,"sources":["D:/Users/User/Desktop/canvas_client/drawing/src/components/canvas/canvas.js"],"names":[],"mappingssourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import { HuePicker } from 'react-color'\r\n// import {useSelector, useDispatch } from 'react-redux';\r\n\r\n// import './canvas.css'\r\n\r\n// import { Stage, Layer, Line, Text } from 'react-konva';\r\n\r\n// import { socketRef } from '../socket/socket';\r\n\r\n// function Canvas() {\r\n//   const [tool, setTool] = useState('pen');\r\n//   const [lines, setLines] = useState([]);\r\n//   const [colorPen, setColorPen] = useState(\"#000000\");\r\n//   const isDrawing = React.useRef(false);\r\n//   const [shardDraw, setShardDraw] = useState();\r\n//   var lastLine;\r\n//   const name=useSelector((state)=>state.member.name)\r\n   \r\n//   // useEffect(() => {\r\n//   //       console.log(\"effect\")\r\n//   //       socketRef.emit(\"sendDraw\")窶十r\n//   //     },[]);\r\n\r\n//   // socketRef.on(\"drawingListener\",(lines)=>{\r\n//   //   console.log(\"wowwwwwwwwwwwwwwwwww\");\r\n//   //   setLines(lines)\r\n//   //   console.log(lines,\"lineson\");\r\n//   //   })\r\n\r\n  \r\n// socketRef.on(\"drawingListener\",(lines1)=>{\r\n// debugger\r\n// console.log(\"wowwwwwwwwwwwwwwwwww\",lines1);\r\n\r\n// //dispatch(actions.setLines(lines))\r\n// setLines(lines1)\r\n// console.log(lines1,\"lineson\");\r\n// })窶十r\n\r\n//   const handleMouseDown = (e) => {\r\n//     isDrawing.current = true;\r\n//     const pos = e.target.getStage().getPointerPosition();\r\n//     console.log(\"pos\",pos);\r\n//     setLines([...lines, { tool, points: [pos.x, pos.y] }]);\r\n//   };\r\n\r\n//   const handleMouseMove = (e) => {\r\n//       console.log\r\n//       (\"dawn\")\r\n//     // no drawing - skipping\r\n//     if (!isDrawing.current) {\r\n//       return;\r\n//     }\r\n//     const stage = e.target.getStage();\r\n//     console.log(stage, 's')\r\n//     const point = stage.getPointerPosition();\r\n//     console.log(point, 'p')\r\n\r\n//     lastLine = lines[lines.length - 1];\r\n//     lastLine.color = colorPen;\r\n//     lastLine.name=name;\r\n//     console.log(lastLine, 'll')\r\n\r\n//     // add point\r\n//     lastLine.points = lastLine.points.concat([point.x, point.y]);\r\n//     setShardDraw(lastLine.points)\r\n//     console.log(\"sendDraw\");\r\n//     socketRef.emit(\"sendDraw\", lines)\r\n    \r\n//     // event\r\n//     console.log(lastLine.points, 'emit')\r\n\r\n//     // replace last\r\n//     lines.splice(lines.length - 1, 1, lastLine);\r\n//     setLines(lines.concat());\r\n//     console.log(lines, 'lines');\r\n//   };\r\n\r\n//   const handleMouseUp = () => {\r\n//     isDrawing.current = false;\r\n//   };\r\n\r\n//  const handleChangeComplete = (color) => {\r\n//    console.log(\"ccc\", color.hex)\r\n//     setColorPen(color.hex);\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//        <select \r\n//        className=\"select_canvas\"\r\n//         value={tool}\r\n//         onChange={(e) => {\r\n//           setTool(e.target.value);\r\n//         }}\r\n//       >\r\n//         <option value=\"pen\">Pen</option>\r\n//         <option value=\"eraser\">Eraser</option>\r\n//       </select>\r\n//       <Stage \r\n//       className=\"stage_canvas\"\r\n//         width={160}\r\n//         height={200}\r\n//         onMouseDown={handleMouseDown}\r\n//         onMousemove={handleMouseMove}\r\n//         onMouseup={handleMouseUp}\r\n//       >\r\n//         <Layer>\r\n//           <Text text=\"Just start drawing\" x={5} y={30} />\r\n//           {lines.map((line, i) => (\r\n//             <Line\r\n//               key={i}\r\n//               points={line.points}\r\n//               stroke={line.color}\r\n//               strokeWidth={5}\r\n//               tension={0.5}\r\n//               lineCap=\"round\"\r\n//               globalCompositeOperation={\r\n//                 line.tool === 'eraser' ? 'destination-out' : 'source-over'\r\n//               }\r\n//             />\r\n//           ))}\r\n//         </Layer>\r\n//       </Stage>\r\n//       <HuePicker className=\"picker_canvas\" \r\n//        color={ colorPen }\r\n//        onChangeComplete={ handleChangeComplete }/>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Canvas"]},"metadata":{},"sourceType":"module"}