{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\User\\\\Desktop\\\\canvas_client\\\\drawing\\\\src\\\\components\\\\canvas\\\\canvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { HuePicker } from 'react-color';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './canvas.css';\nimport { Stage, Layer, Line, Text } from 'react-konva';\nimport { socketRef } from '../socket/socket';\nimport { actions } from '../redux/actions/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Canvas() {\n  _s();\n\n  const [tool, setTool] = useState('pen');\n  const [colorPen, setColorPen] = useState(\"#000000\");\n  const isDrawing = React.useRef(false);\n  const [shardDraw, setShardDraw] = useState();\n  var lastLine;\n  const name = useSelector(state => state.member.name);\n  const linesStore = useSelector(state => state.member.lines);\n  const dispatch = useDispatch();\n  const [lines, setLines] = useState([]);\n  const update = useSelector(state => state.member.update);\n  const nameToVisible = useSelector(state => state.member.nameToVisible);\n  useEffect(() => {\n    let xlines = lines;\n    xlines.find((line, i) => {\n      if (line.name === nameToVisible) {\n        line.visable = !line.visable;\n        xlines[i].visable = line.visable;\n        setLines(xlines);\n      }\n    });\n  }, [update]);\n  socketRef.on(\"drawingListener\", lines1 => {\n    setLines(lines1);\n  });\n\n  const handleMouseDown = e => {\n    isDrawing.current = true;\n    const pos = e.target.getStage().getPointerPosition();\n    setLines([...lines, {\n      tool,\n      points: [pos.x, pos.y]\n    }]);\n  };\n\n  const handleMouseMove = e => {\n    if (!isDrawing.current) {\n      return;\n    }\n\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    lastLine = lines[lines.length - 1];\n    lastLine.color = colorPen;\n    lastLine.name = name;\n    console.log(lastLine, 'll'); // add point\n\n    lastLine.points = lastLine.points.concat([point.x, point.y]);\n    lastLine.visable = true;\n    setShardDraw(lastLine.points);\n    console.log(\"sendDraw\");\n    socketRef.emit(\"sendDraw\", lines); // event\n\n    console.log(lastLine.points, 'emit'); // replace last\n    //i added\n    // lastLine.visable=true;\n\n    lines.splice(lines.length - 1, 1, lastLine);\n    setLines(lines.concat());\n    console.log(lines, 'lines');\n  };\n\n  const handleMouseUp = () => {\n    isDrawing.current = false;\n  };\n\n  const handleChangeComplete = color => {\n    console.log(\"ccc\", color.hex);\n    setColorPen(color.hex);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      className: \"select_canvas\",\n      value: tool,\n      onChange: e => {\n        setTool(e.target.value);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"pen\",\n        children: \"Pen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"eraser\",\n        children: \"Eraser\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(Stage, {\n      className: \"stage_canvas\",\n      width: 120,\n      height: 180,\n      onMouseDown: handleMouseDown,\n      onMousemove: handleMouseMove,\n      onMouseup: handleMouseUp,\n      children: /*#__PURE__*/_jsxDEV(Layer, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          text: \"Just start drawing\",\n          x: 5,\n          y: 30\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), lines.map((line, i) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Line, {\n            points: line.points,\n            stroke: line.color,\n            strokeWidth: 5,\n            tension: 0.5,\n            visible: line.visable,\n            lineCap: \"round\",\n            globalCompositeOperation: line.tool === 'eraser' ? 'destination-out' : 'source-over'\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)\n        }, void 0, false))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HuePicker, {\n      className: \"picker_canvas\",\n      color: colorPen,\n      onChangeComplete: handleChangeComplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Canvas, \"oKJ+makZ/BooepuF2PSTICjhS4M=\", false, function () {\n  return [useSelector, useSelector, useDispatch, useSelector, useSelector];\n});\n\n_c = Canvas;\n;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["D:/Users/User/Desktop/canvas_client/drawing/src/components/canvas/canvas.js"],"names":["React","useState","useEffect","HuePicker","useSelector","useDispatch","Stage","Layer","Line","Text","socketRef","actions","Canvas","tool","setTool","colorPen","setColorPen","isDrawing","useRef","shardDraw","setShardDraw","lastLine","name","state","member","linesStore","lines","dispatch","setLines","update","nameToVisible","xlines","find","line","i","visable","on","lines1","handleMouseDown","e","current","pos","target","getStage","getPointerPosition","points","x","y","handleMouseMove","stage","point","length","color","console","log","concat","emit","splice","handleMouseUp","handleChangeComplete","hex","value","map"],"mappings":"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","sourcesContent":["import React, { useState,useEffect } from 'react';\r\nimport { HuePicker } from 'react-color'\r\nimport {useSelector, useDispatch } from 'react-redux';\r\n\r\nimport './canvas.css'\r\n\r\nimport { Stage, Layer, Line, Text } from 'react-konva';\r\n\r\nimport { socketRef } from '../socket/socket';\r\nimport { actions } from '../redux/actions/actions';\r\n\r\n\r\nfunction Canvas() {\r\n  const [tool, setTool] = useState('pen');\r\n \r\n  const [colorPen, setColorPen] = useState(\"#000000\");\r\n  const isDrawing = React.useRef(false);\r\n  const [shardDraw, setShardDraw] = useState();\r\n  var lastLine;\r\n  const name=useSelector((state)=>state.member.name)\r\n  const linesStore=useSelector((state)=>state.member.lines)\r\n  const dispatch=useDispatch();\r\n  const [lines, setLines] = useState([]);\r\n  const update=useSelector((state)=>state.member.update)\r\n  const nameToVisible=useSelector((state)=>state.member.nameToVisible)\r\n\r\n\r\n  useEffect(() => {\r\n      let xlines=lines;\r\n      xlines.find((line,i)=>{\r\n        if(line.name===nameToVisible)\r\n        {\r\n          line.visable=!line.visable;\r\n          xlines[i].visable=line.visable;\r\n          setLines(xlines)\r\n        }\r\n      })\r\n      },[update]);\r\n\r\n  socketRef.on(\"drawingListener\",(lines1)=>{\r\n\r\n    setLines(lines1)\r\n    })\r\n\r\n  const handleMouseDown = (e) => {\r\n    isDrawing.current = true;\r\n    const pos = e.target.getStage().getPointerPosition();\r\n setLines([...lines, { tool, points: [pos.x, pos.y] }]);\r\n  };\r\n\r\n  const handleMouseMove = (e) => {\r\n    if (!isDrawing.current) {\r\n      return;\r\n    }\r\n    const stage = e.target.getStage();\r\n    const point = stage.getPointerPosition();\r\n\r\n    lastLine = lines[lines.length - 1];\r\n    lastLine.color = colorPen;\r\n    lastLine.name=name;\r\n    console.log(lastLine, 'll')\r\n\r\n    // add point\r\n    lastLine.points = lastLine.points.concat([point.x, point.y]);\r\n    lastLine.visable=true;\r\n    setShardDraw(lastLine.points)\r\n    console.log(\"sendDraw\");\r\n    socketRef.emit(\"sendDraw\", lines)\r\n    \r\n    // event\r\n    console.log(lastLine.points, 'emit')\r\n\r\n    // replace last\r\n    //i added\r\n    // lastLine.visable=true;\r\n    lines.splice(lines.length - 1, 1, lastLine);\r\n  setLines(lines.concat());\r\n    console.log(lines, 'lines');\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    isDrawing.current = false;\r\n  };\r\n\r\n const handleChangeComplete = (color) => {\r\n   console.log(\"ccc\", color.hex)\r\n    setColorPen(color.hex);\r\n  };\r\n \r\n  return (\r\n    <div>\r\n       <select\r\n       className=\"select_canvas\"\r\n        value={tool}\r\n        onChange={(e) => {\r\n          setTool(e.target.value);\r\n        }}\r\n      >\r\n        <option value=\"pen\">Pen</option>\r\n        <option value=\"eraser\">Eraser</option>\r\n      </select>\r\n      <Stage \r\n      className=\"stage_canvas\"\r\n        width={120}\r\n        height={180}\r\n        onMouseDown={handleMouseDown}\r\n        onMousemove={handleMouseMove}\r\n        onMouseup={handleMouseUp}\r\n      >\r\n        <Layer>\r\n          <Text text=\"Just start drawing\" x={5} y={30} />\r\n          {lines.map((line, i) => (\r\n            <>\r\n            {/* {line.visable? */}\r\n            <Line\r\n              key={i}\r\n              points={line.points}\r\n              stroke={line.color}\r\n              strokeWidth={5}\r\n              tension={0.5}\r\n              visible={line.visable}\r\n              \r\n              lineCap=\"round\"\r\n              globalCompositeOperation={\r\n                line.tool === 'eraser' ? 'destination-out' : 'source-over'\r\n              }\r\n            />\r\n            {/* :''} */}\r\n            </>\r\n          ))}\r\n        </Layer>\r\n      </Stage>\r\n      <HuePicker className=\"picker_canvas\" \r\n       color={ colorPen }\r\n       onChangeComplete={ handleChangeComplete }/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Canvas"]},"metadata":{},"sourceType":"module"}