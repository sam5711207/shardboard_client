{"ast":null,"code":"import socketIOClient from \"socket.io-client\";\nimport keys from '../../config/keys';\nimport { actions } from \"../redux/actions/actions\";\nimport store from '../redux/store';\nexport const socketRef = socketIOClient.connect(keys.API_URL_SOCKET); // const tryReconnect = function () {\n//     if (socketRef?.socket?.connected === false && socketRef.socket?.connecting === false) {\n//         let hangouts = [];\n//         store?.getState().channelsReducer.tabs.forEach(tab => {\n//             tab.hangouts.forEach(hangout => hangouts.push(hangout.hangout?._id))\n//         });\n//         console.log(\"connect again!!!!!!!!\");\n//         store?.dispatch(actions.setConnect(false));\n//         socketRef.socket.reconnect(hangouts, userName);\n//     }\n// }\n// let intervalID = setInterval(tryReconnect, 2000);\n// let userName = store?.getState().userReducer.userName;\n// socketRef.on('connect', (message) => {\n//     clearInterval(intervalID);\n// });\n\nsocketRef.on('disconnect', disconnect => {\n  store === null || store === void 0 ? void 0 : store.dispatch(actions.setConnect(false));\n  console.log(\"disconnect\", disconnect); // intervalID = setInterval(tryReconnect, 2000);\n});","map":{"version":3,"sources":["D:/Users/User/Desktop/canvas_client/drawing/src/components/socket/socket.js"],"names":["socketIOClient","keys","actions","store","socketRef","connect","API_URL_SOCKET","on","disconnect","dispatch","setConnect","console","log"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,OAAQC,IAAR,MAAmB,mBAAnB;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AAIA,OAAO,MAAMC,SAAS,GAAGJ,cAAc,CAACK,OAAf,CAAuBJ,IAAI,CAACK,cAA5B,CAAlB,C,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;AAEAF,SAAS,CAACG,EAAV,CAAa,YAAb,EAA4BC,UAAD,IAAgB;AACvCL,EAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEM,QAAP,CAAgBP,OAAO,CAACQ,UAAR,CAAmB,KAAnB,CAAhB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BJ,UAA1B,EAFuC,CAGvC;AACH,CAJD","sourcesContent":["import socketIOClient from \"socket.io-client\";\r\nimport  keys  from '../../config/keys';\r\nimport { actions } from \"../redux/actions/actions\";\r\nimport store from '../redux/store'\r\n\r\n\r\n\r\nexport const socketRef = socketIOClient.connect(keys.API_URL_SOCKET);\r\n\r\n// const tryReconnect = function () {\r\n//     if (socketRef?.socket?.connected === false && socketRef.socket?.connecting === false) {\r\n//         let hangouts = [];\r\n//         store?.getState().channelsReducer.tabs.forEach(tab => {\r\n//             tab.hangouts.forEach(hangout => hangouts.push(hangout.hangout?._id))\r\n//         });\r\n//         console.log(\"connect again!!!!!!!!\");\r\n//         store?.dispatch(actions.setConnect(false));\r\n//         socketRef.socket.reconnect(hangouts, userName);\r\n//     }\r\n// }\r\n\r\n// let intervalID = setInterval(tryReconnect, 2000);\r\n// let userName = store?.getState().userReducer.userName;\r\n\r\n// socketRef.on('connect', (message) => {\r\n//     clearInterval(intervalID);\r\n// });\r\n\r\nsocketRef.on('disconnect', (disconnect) => {\r\n    store?.dispatch(actions.setConnect(false));\r\n    console.log(\"disconnect\", disconnect);\r\n    // intervalID = setInterval(tryReconnect, 2000);\r\n});"]},"metadata":{},"sourceType":"module"}